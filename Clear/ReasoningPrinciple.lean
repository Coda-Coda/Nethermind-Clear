import Mathlib.Tactic
import Clear.Abstraction
import Clear.Utilities
open Clear Ast Expr Stmt State Interpreter ExecLemmas OutOfFuelLemmas JumpLemmas Abstraction PrimOps
namespace Clear.ReasoningPrinciple

-- Print structures more concisely in the infoview.
set_option pp.structureInstances false

variable {s‚ÇÄ s‚Çâ : State}
         {fuel : ‚Ñï}

-- | "Concrete" spec of a loop.
--
-- This recursive predicate is a sort of intermediate step between the code and
-- the abstract spec of the loop. It is more or less just a description of how
-- the interpreter handles loops.
def C (ABody : State ‚Üí State ‚Üí Prop) (APost : State ‚Üí State ‚Üí Prop) (ACond : State ‚Üí Literal) (fuel : ‚Ñï) (s‚ÇÄ s‚Çâ : State) : Prop :=
  match fuel with
    | 0 => diverge s‚ÇÄ = s‚Çâ
    | 1 => diverge s‚ÇÄ = s‚Çâ
    | fuel + 1 + 1 =>
      ‚àÉ s‚ÇÇ s‚ÇÉ s‚ÇÖ,
      let s‚ÇÑ := s‚ÇÉ‚úèÔ∏è‚ü¶s‚ÇÄ‚üß?
      let s‚ÇÜ := s‚ÇÖ‚úèÔ∏è‚ü¶s‚ÇÄ‚üß?
      (Spec ABody (üëås‚ÇÄ) s‚ÇÇ)
      ‚àß (Spec APost (üßüs‚ÇÇ) s‚ÇÉ)
      ‚àß (Spec (C ABody APost ACond fuel) s‚ÇÑ s‚ÇÖ)
      ‚àß (if ACond (üëå s‚ÇÄ) = 0 then (üëås‚ÇÄ)‚úèÔ∏è‚ü¶s‚ÇÄ‚üß?
        else
          match s‚ÇÇ with
            | .OutOfFuel                      => s‚ÇÇ‚úèÔ∏è‚ü¶s‚ÇÄ‚üß?
            | .Checkpoint (.Break _ _)      => üßüs‚ÇÇ‚úèÔ∏è‚ü¶s‚ÇÄ‚üß?
            | .Checkpoint (.Leave _ _)      => s‚ÇÇ‚úèÔ∏è‚ü¶s‚ÇÄ‚üß?
            | .Checkpoint (.Continue _ _)
            | _ => s‚ÇÜ
        ) = s‚Çâ

-- | Proof that the code of a `For` loop entails `C`, our recursive predicate for loops.
lemma reasoning_principle_1
  (cond : Expr)
  (post : List Stmt)
  (body : List Stmt)
  (ACond : State ‚Üí Literal)
  (APost : State ‚Üí State ‚Üí Prop)
  (ABody : State ‚Üí State ‚Üí Prop)
  -- TODO: This will need to change to handle function calls, but one thing at a time.
  (hcond : ‚àÄ s‚ÇÄ fuel, eval fuel cond s‚ÇÄ = (s‚ÇÄ, ACond s‚ÇÄ))
  (hpost : ‚àÄ {s‚ÇÄ : State} {fuel : ‚Ñï} (s‚Çâ : State), exec fuel (.Block post) s‚ÇÄ = s‚Çâ ‚Üí Spec APost s‚ÇÄ s‚Çâ)
  (hbody : ‚àÄ {s‚ÇÄ : State} {fuel : ‚Ñï} (s‚Çâ : State), exec fuel (.Block body) s‚ÇÄ = s‚Çâ ‚Üí Spec ABody s‚ÇÄ s‚Çâ) :
  exec fuel (.For cond post body) s‚ÇÄ = s‚Çâ ‚Üí Spec (C ABody APost ACond fuel) s‚ÇÄ s‚Çâ := by
  intros hcode; unfold Spec
  induction fuel using Nat.case_strong_induction_on generalizing s‚ÇÄ s‚Çâ with
  | hz =>
    rw [For'] at hcode
    rcases s‚ÇÄ with ‚ü®evm, store‚ü© | - | _ <;> aesop
  | hi fuel ih =>
    revert hcode
    rcases s‚ÇÄ with ‚ü®evm, store‚ü© | _ | c <;> dsimp only <;> [skip; aesop; aesop]
    intros h hfuel; revert h
    rw [For']
    rcases fuel with _ | fuel <;> [aesop; skip]
    dsimp only
    generalize hs‚ÇÇ : exec _ (.Block body) _ = s‚ÇÇ; specialize hbody _ hs‚ÇÇ
    generalize hs‚ÇÉ : exec _ (.Block post) _ = s‚ÇÉ; specialize hpost _ hs‚ÇÉ
    generalize hs‚ÇÖ : exec _ (.For cond post body) _ = s‚ÇÖ; specialize ih fuel (by linarith) hs‚ÇÖ
    intros h
    refine' ‚ü®s‚ÇÇ, ‚ü®s‚ÇÉ, ‚ü®s‚ÇÖ, _‚ü©‚ü©‚ü©
    unfold Spec
    aesop

lemma ABody_notOutOfFuel_of_ABody_ok {s‚ÇÄ s‚ÇÇ : State} {ABody} (h : s‚ÇÄ.isOk) :
  Spec ABody (üëås‚ÇÄ) s‚ÇÇ ‚Üí ¬¨‚ùì s‚ÇÇ ‚Üí ABody s‚ÇÄ s‚ÇÇ := by
  unfold Spec mkOk; unfold isOk at h
  aesop

set_option maxHeartbeats 400000 in
-- | Proof that if `C` holds for some set of abstract specs, and we know
-- certain relations hold among these specs, then the abstract spec for the
-- loop must hold.
lemma reasoning_principle_2
  (ACond : State ‚Üí Literal)
  (APost : State ‚Üí State ‚Üí Prop)
  (ABody : State ‚Üí State ‚Üí Prop)
  (AFor : State ‚Üí State ‚Üí Prop)
  -- TODO: Probably we need some extra hypotheses here about fuel/errors.
  (AZero : ‚àÄ s‚ÇÄ, isOk s‚ÇÄ ‚Üí ACond (üëå s‚ÇÄ) = 0 ‚Üí AFor s‚ÇÄ s‚ÇÄ)
  (AOk : ‚àÄ s‚ÇÄ s‚ÇÇ s‚ÇÑ s‚ÇÖ, isOk s‚ÇÄ ‚Üí isOk s‚ÇÇ ‚Üí ¬¨ ‚ùì s‚ÇÖ ‚Üí ¬¨ ACond s‚ÇÄ = 0 ‚Üí ABody s‚ÇÄ s‚ÇÇ ‚Üí APost s‚ÇÇ s‚ÇÑ ‚Üí Spec AFor s‚ÇÑ s‚ÇÖ ‚Üí AFor s‚ÇÄ s‚ÇÖ)
  (AContinue : ‚àÄ s‚ÇÄ s‚ÇÇ s‚ÇÑ s‚ÇÖ, isOk s‚ÇÄ ‚Üí isContinue s‚ÇÇ ‚Üí ¬¨ ACond s‚ÇÄ = 0 ‚Üí ABody s‚ÇÄ s‚ÇÇ ‚Üí Spec APost (üßüs‚ÇÇ) s‚ÇÑ ‚Üí Spec AFor s‚ÇÑ s‚ÇÖ ‚Üí AFor s‚ÇÄ s‚ÇÖ)
  (ABreak : ‚àÄ s‚ÇÄ s‚ÇÇ, isOk s‚ÇÄ ‚Üí isBreak s‚ÇÇ ‚Üí ¬¨ ACond s‚ÇÄ = 0 ‚Üí ABody s‚ÇÄ s‚ÇÇ ‚Üí AFor s‚ÇÄ (üßüs‚ÇÇ))
  (ALeave : ‚àÄ s‚ÇÄ s‚ÇÇ, isOk s‚ÇÄ ‚Üí isLeave s‚ÇÇ ‚Üí ¬¨ ACond s‚ÇÄ = 0 ‚Üí ABody s‚ÇÄ s‚ÇÇ ‚Üí AFor s‚ÇÄ s‚ÇÇ)
: Spec (C ABody APost ACond fuel) s‚ÇÄ s‚Çâ ‚Üí Spec AFor s‚ÇÄ s‚Çâ
:= by
  unfold Spec
  induction fuel using Nat.case_strong_induction_on generalizing s‚ÇÄ s‚Çâ with
  | hz =>
    unfold C; intros h
    rcases s‚ÇÄ with ‚ü®evm, store‚ü© | - | _ <;> aesop
  | hi fuel ih =>
    intros h
    rcases s‚ÇÄ with ‚ü®evm, store‚ü© | _ | c <;> dsimp only at * <;> [skip; assumption; assumption]
    intros hfuel
    specialize h hfuel
    unfold C at h
    generalize hs‚ÇÄ : Ok evm store = s‚ÇÄ at *
    have hok : isOk s‚ÇÄ := by rw [‚Üê hs‚ÇÄ]; simp

    -- Refuel
    revert h
    rcases fuel with _ | fuel <;> [aesop; skip]
    rw [Nat.succ_eq_add_one] at *
    intros h

    dsimp (config := {zeta := False}) only at h
    obtain ‚ü®s‚ÇÇ, s‚ÇÉ, s‚ÇÖ, hbody, hpost, hrecurse, hs‚Çâ‚ü© := h
    split_ifs at hs‚Çâ with hcond <;> [aesop; skip]
    rw [@mkOk_of_isOk _ hok] at hcond
    generalize hs‚ÇÑ : s‚ÇÉ‚úèÔ∏è‚ü¶s‚ÇÄ‚üß? = s‚ÇÑ at *
    specialize ih fuel (by linarith) hrecurse
    clear hrecurse
    have hbody : ¬¨‚ùì s‚ÇÇ ‚Üí ABody s‚ÇÄ s‚ÇÇ := ABody_notOutOfFuel_of_ABody_ok (hs‚ÇÄ ‚ñ∏ isOk_Ok) hbody
    rcases s‚ÇÇ with ‚ü®evm‚ÇÇ, store‚ÇÇ‚ü© | _ | c‚ÇÇ
      <;> simp at *
      <;> rw [‚Üê hs‚Çâ] at hfuel ‚ä¢
      <;> clear hs‚Çâ
      <;> rw [overwrite?_of_isOk (by rw [‚Üê hs‚ÇÄ]; simp)] at *
    ¬∑ generalize hs‚ÇÇ : Ok evm‚ÇÇ store‚ÇÇ = s‚ÇÇ at *
      unfold Spec at hpost
      rw [‚Üêhs‚ÇÇ] at hpost
      simp at hpost
      rw [hs‚ÇÇ] at hpost
      have herr‚ÇÉ : ¬¨ ‚ùì s‚ÇÉ := by rw [hs‚ÇÑ]; apply not_isOutOfFuel_Spec ih hfuel
      specialize hpost herr‚ÇÉ
      rw [hs‚ÇÑ] at herr‚ÇÉ
      have hok‚ÇÇ : isOk s‚ÇÇ := by rw [‚Üê hs‚ÇÇ]; simp
      rw [hs‚ÇÑ] at hpost
      exact AOk s‚ÇÄ s‚ÇÇ s‚ÇÑ s‚ÇÖ hok hok‚ÇÇ hfuel hcond hbody hpost ih
    ¬∑ aesop
    ¬∑ rcases c‚ÇÇ with ‚ü®evm, store‚ü© <;> simp at * <;> try rw [overwrite?_of_isOk (by rw [‚Üêhs‚ÇÄ]; simp)] at * <;> rw [hs‚ÇÑ] at hpost
      ¬∑ exact AContinue s‚ÇÄ _ s‚ÇÑ s‚ÇÖ hok (by simp only [isContinue_Continue]) hcond hbody hpost ih
      ¬∑ aesop
      ¬∑ aesop

-- | Code ‚Üí Abstract for a loop.
--
-- Given:
--  * code ‚Üí abs for cond
--  * code ‚Üí abs for post
--  * code ‚Üí abs for body
--  * Abstract spec for loop is entailed by abstract specs for cond, post, body in all possible cases
--
-- We get that executing a loop implies its abstract spec.
lemma reasoning_principle_3
  (cond : Expr)
  (post : List Stmt)
  (body : List Stmt)
  (ACond : State ‚Üí Literal)
  (APost : State ‚Üí State ‚Üí Prop)
  (ABody : State ‚Üí State ‚Üí Prop)
  (AFor : State ‚Üí State ‚Üí Prop)
  -- TODO: Probably we need some extra hypotheses here about fuel/errors.
  (AZero : ‚àÄ s‚ÇÄ, isOk s‚ÇÄ ‚Üí ACond (üëå s‚ÇÄ) = 0 ‚Üí AFor s‚ÇÄ s‚ÇÄ)
  (AOk : ‚àÄ s‚ÇÄ s‚ÇÇ s‚ÇÑ s‚ÇÖ, isOk s‚ÇÄ ‚Üí isOk s‚ÇÇ ‚Üí ¬¨ ‚ùì s‚ÇÖ ‚Üí ¬¨ ACond s‚ÇÄ = 0 ‚Üí ABody s‚ÇÄ s‚ÇÇ ‚Üí APost s‚ÇÇ s‚ÇÑ ‚Üí Spec AFor s‚ÇÑ s‚ÇÖ ‚Üí AFor s‚ÇÄ s‚ÇÖ)
  (AContinue : ‚àÄ s‚ÇÄ s‚ÇÇ s‚ÇÑ s‚ÇÖ, isOk s‚ÇÄ ‚Üí isContinue s‚ÇÇ ‚Üí ¬¨ ACond s‚ÇÄ = 0 ‚Üí ABody s‚ÇÄ s‚ÇÇ ‚Üí Spec APost (üßüs‚ÇÇ) s‚ÇÑ ‚Üí Spec AFor s‚ÇÑ s‚ÇÖ ‚Üí AFor s‚ÇÄ s‚ÇÖ)
  (ABreak : ‚àÄ s‚ÇÄ s‚ÇÇ, isOk s‚ÇÄ ‚Üí isBreak s‚ÇÇ ‚Üí ¬¨ ACond s‚ÇÄ = 0 ‚Üí ABody s‚ÇÄ s‚ÇÇ ‚Üí AFor s‚ÇÄ (üßüs‚ÇÇ))
  (ALeave : ‚àÄ s‚ÇÄ s‚ÇÇ, isOk s‚ÇÄ ‚Üí isLeave s‚ÇÇ ‚Üí ¬¨ ACond s‚ÇÄ = 0 ‚Üí ABody s‚ÇÄ s‚ÇÇ ‚Üí AFor s‚ÇÄ s‚ÇÇ)
  -- TODO: This will need to change to handle function calls, but one thing at a time.
  (hcond : ‚àÄ s‚ÇÄ fuel, eval fuel cond ( s‚ÇÄ) = ( s‚ÇÄ, ACond ( s‚ÇÄ)))
  (hpost : ‚àÄ {s‚ÇÄ : State} {fuel : ‚Ñï} (s‚Çâ : State), exec fuel (.Block post) s‚ÇÄ = s‚Çâ ‚Üí Spec APost s‚ÇÄ s‚Çâ)
  (hbody : ‚àÄ {s‚ÇÄ : State} {fuel : ‚Ñï} (s‚Çâ : State), exec fuel (.Block body) s‚ÇÄ = s‚Çâ ‚Üí Spec ABody s‚ÇÄ s‚Çâ)
: exec fuel (.For cond post body) s‚ÇÄ = s‚Çâ ‚Üí Spec AFor s‚ÇÄ s‚Çâ
:= by
  intros hcode
  apply @reasoning_principle_2 _ _ fuel ACond APost ABody AFor AZero AOk AContinue ABreak ALeave
  apply @reasoning_principle_1 _ _ fuel cond post body ACond APost ABody hcond hpost hbody hcode

end Clear.ReasoningPrinciple
